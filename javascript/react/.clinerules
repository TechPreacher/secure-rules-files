# Secure JavaScript/React Code Generation Rules

As a security-aware developer, generate secure JavaScript code using React that inherently prevents top security weaknesses. Focus on making the implementation inherently safe rather than merely renaming methods with "secure_" prefixes. Use inline comments to clearly highlight critical security controls, implemented measures, and any security assumptions made in the code. Adhere strictly to best practices from OWASP, with particular consideration for the OWASP ASVS guidelines. **Avoid Slopsquatting**: Be careful when referencing or importing packages. Do not guess if a package exists. Comment on any low reputation or uncommon packages you have included.

---

## Top CWEs for JavaScript + React Applications

### CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
**Summary:** The application allows untrusted data to be included in an HTML page without proper neutralization, leading to execution of malicious scripts.
**Mitigation Rule:** Always leverage React's automatic escaping for dynamic content rendering. Avoid `dangerouslySetInnerHTML` unless absolutely necessary and, if used, ensure all inputs are thoroughly sanitized with a robust library like `dompurify` (from `github.com/cure53/DOMPurify`) before being passed to it. Do not render user-controlled data directly as HTML attributes or within script tags.

### CWE-20: Improper Input Validation
**Summary:** The application does not validate or incorrectly validates user-provided data, leading to various vulnerabilities.
**Mitigation Rule:** Implement comprehensive input validation on all user-supplied data at the earliest possible point (client-side for UX, server-side for security). For React, validate form inputs using libraries like `yup` or `zod` before sending them to the backend, but always assume client-side validation can be bypassed and rely on backend validation for security-critical checks.

### CWE-352: Cross-Site Request Forgery (CSRF)
**Summary:** The application does not sufficiently protect against malicious requests being sent from a user's browser, potentially tricking the user into executing unintended actions.
**Mitigation Rule:** For state-changing operations, ensure the backend utilizes anti-CSRF tokens and verifies the `Origin` and `Referer` headers. On the frontend, ensure these tokens are included in requests (e.g., in headers for AJAX/fetch requests) and that cookies used for authentication have `SameSite=Lax` or `Strict` attributes and are marked `Secure` and `HttpOnly`.

### CWE-312: Cleartext Storage of Sensitive Information
**Summary:** The application stores sensitive information without encryption or other protective measures, making it vulnerable to unauthorized access.
**Mitigation Rule:** Never store sensitive user information (like PII, authentication tokens, or credentials) directly in `localStorage`, `sessionStorage`, or `IndexedDB`. If data must persist client-side, limit its sensitivity and encrypt it where possible, or use secure, HttpOnly, and SameSite cookies for session management (handled by the backend) instead.

### CWE-319: Cleartext Transmission of Sensitive Information
**Summary:** The application transmits sensitive information without encryption, making it susceptible to eavesdropping.
**Mitigation Rule:** Enforce HTTPS (TLS) for all network communication, without exception, to protect data in transit. Ensure all API endpoints and external resources are accessed via `https://` URLs.

### CWE-798: Use of Hard-coded Credentials
**Summary:** The application embeds sensitive credentials directly into the source code, making them easily discoverable and compromising security.
**Mitigation Rule:** Never hardcode API keys, database credentials, cryptographic keys, or other sensitive secrets directly within the JavaScript or React application bundle. Use environment variables (e.g., `process.env.REACT_APP_API_KEY` for build-time injection) for public API keys that are *not* secret. For truly sensitive secrets, manage them securely on the backend using dedicated secrets management services, and never expose them to the frontend.

### CWE-287: Improper Authentication
**Summary:** The application does not correctly verify the identity of a user or process, leading to unauthorized access.
**Mitigation Rule:** Implement authentication processes using industry-standard protocols (e.g., OAuth 2.0, OpenID Connect). Handle authentication tokens (like JWTs) securely by storing them in `HttpOnly`, `Secure`, and `SameSite` cookies, rather than `localStorage` or `sessionStorage`, to mitigate XSS risks. Implement proper session management, token expiration, and secure logout procedures, always verifying authentication on the server-side for every protected resource.