# Secure Node.js Code Generation Rules

## Foundational Instructions for the LLM

*   As a security-aware developer, generate secure JavaScript code using Node.js that inherently prevents top security weaknesses.
*   Focus on making the implementation inherently safe rather than merely renaming methods with "secure_" prefixes.
*   Use inline comments to clearly highlight critical security controls, implemented measures, and any security assumptions made in the code.
*   Adhere strictly to best practices from OWASP, with particular consideration for the OWASP ASVS guidelines.
*   **Avoid Slopsquatting**: Be careful when referencing or importing packages. Do not guess if a package exists. Comment on any low reputation or uncommon packages you have included.

## Top CWEs for JavaScript + Node.js

### CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
**Summary:** User-controlled input is not properly sanitized or encoded before being included in rendered output, allowing injection of malicious scripts.
**Mitigation Rule:** Always output encode all untrusted data before rendering it in any HTML, JavaScript, URL, or CSS context. Utilize templating engines that auto-escape by default (e.g., Pug, EJS with proper escaping) or dedicated libraries like `dompurify` for HTML sanitation and `OWASP ESAPI for JavaScript` for general output encoding.

### CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
**Summary:** Malicious SQL syntax can be injected into database queries via user input, altering query logic or exposing sensitive data.
**Mitigation Rule:** Always use parameterized queries (prepared statements) or Object-Relational Mappers (ORMs) that explicitly support parameterized queries for all database interactions. Never concatenate user-supplied input directly into SQL query strings. Popular ORMs like `Sequelize` or query builders like `Knex.js` provide this functionality.

### CWE-306: Missing Authentication for Critical Function
**Summary:** Critical application functionality is accessible without proper authentication, enabling unauthorized users to perform sensitive actions.
**Mitigation Rule:** Implement robust authentication mechanisms for all sensitive endpoints and critical operations. Ensure every request to restricted routes or administrative functions is thoroughly authenticated before any processing occurs. Leverage well-vetted authentication libraries such as `Passport.js` with secure strategies.

### CWE-352: Cross-Site Request Forgery (CSRF)
**Summary:** An attacker can trick an authenticated user into unknowingly submitting a malicious request to a web application, performing an action on their behalf.
**Mitigation Rule:** Implement CSRF protection for all state-changing operations by using anti-CSRF tokens (e.g., `csurf` middleware for Express.js), requiring a non-GET HTTP method, and validating the `Origin` or `Referer` header for sensitive requests.

### CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')
**Summary:** User-supplied input is used to construct file paths, allowing access to unauthorized files or directories outside the intended scope.
**Mitigation Rule:** Never construct file paths directly from untrusted user input. Validate and sanitize all file path components to ensure they resolve strictly within an allowed base directory. Use `path.join()` with a fixed base directory and explicitly disallow `..` sequences, or maintain an allowlist of acceptable filenames.

### CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')
**Summary:** User-controlled input is directly incorporated into OS commands, allowing the execution of arbitrary system commands on the server.
**Mitigation Rule:** Avoid executing OS commands directly with user-supplied input. If OS command execution is unavoidable, use functions that explicitly separate the command from its arguments (e.g., Node.js `child_process.spawn()`) and rigorously sanitize all arguments. Never use `child_process.exec()` or `child_process.execSync()` with unsanitized user input.

### CWE-502: Deserialization of Untrusted Data
**Summary:** Deserializing untrusted data can lead to arbitrary code execution, denial of service, or other severe attacks.
**Mitigation Rule:** Avoid deserializing any untrusted or user-controlled data. If deserialization is absolutely necessary, use safe, non-executable data formats (e.g., plain JSON, not YAML with custom tags) and robust validation. Never use `eval()` or `vm.runInContext()` on untrusted input, and prefer `JSON.parse()` for JSON data.

## General Security Considerations

### Memory Safety
**Mitigation Rule:** JavaScript and Node.js are memory-managed languages, inherently mitigating most classic memory safety issues such as buffer overflows or use-after-free vulnerabilities. Focus on logic-based vulnerabilities.

### Hardcoded Secrets and Credentials
**Mitigation Rule:** Never embed sensitive information (e.g., API keys, database credentials, encryption keys, private keys) directly into the codebase. All secrets must be externalized and loaded securely at runtime using environment variables (e.g., `process.env`), secure configuration management tools, or dedicated secrets management services (e.g., AWS Secrets Manager, HashiCorp Vault). Ensure `.env` files or similar are never committed to version control.