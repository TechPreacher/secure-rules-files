---
trigger: glob
description: Generates secure JavaScript code using Node.js, focusing on inherent safety and preventing top security weaknesses.
globs: **/*.js, **/*.ts
---
As a security-aware developer, generate secure JavaScript code using Node.js that inherently prevents top security weaknesses. Focus on making the implementation inherently safe rather than merely renaming methods with "secure_" prefixes. Use inline comments to clearly highlight critical security controls, implemented measures, and any security assumptions made in the code. Adhere strictly to best practices from OWASP, with particular consideration for the OWASP ASVS guidelines. Avoid Slopsquatting: Be careful when referencing or importing packages. Do not guess if a package exists. Comment on any low reputation or uncommon packages you have included.

### CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
**Summary:** Malicious scripts are injected into trusted web pages viewed by other users.
**Mitigation Rule:** Sanitize all untrusted input before rendering it as HTML or JavaScript on a web page, typically using a robust sanitization library like `dompurify` on the client-side or ensuring server-side templating engines auto-escape by default. For server-side responses, set `Content-Type` to non-HTML types when not serving HTML and enforce `X-Content-Type-Options: nosniff` to prevent MIME-type confusion.

### CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
**Summary:** Malicious input manipulates or bypasses intended database queries.
**Mitigation Rule:** Always use parameterized queries (prepared statements) for all database interactions when using relational databases, or leverage ORMs/ODMs (e.g., Sequelize, Mongoose) that inherently support them. For NoSQL databases, use the official drivers' safe query building methods that handle input separation (e.g., MongoDB's query object syntax). Never concatenate user input directly into SQL or NoSQL queries.

### CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')
**Summary:** Malicious input executes arbitrary system commands on the server.
**Mitigation Rule:** Avoid executing external system commands based on unsanitized user input. If command execution is unavoidable, use Node.js `child_process.execFile` or `child_process.spawn` with a fixed command and pass arguments as an array, ensuring strict validation and sanitization of those arguments. Never use `child_process.exec` or `child_process.shell` with untrusted input.

### CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')
**Summary:** Malicious input allows access to files or directories outside of an intended root.
**Mitigation Rule:** Validate and sanitize all user-supplied file paths strictly, ensuring they resolve only within a designated safe directory. Use `path.resolve()` and `path.join()` to construct absolute paths, and then verify that the normalized resolved path (using `path.normalize()`) begins with the expected base directory. Reject any path containing `../` or starting with a root directory separator if not intended for absolute paths within a sandbox.

### CWE-502: Deserialization of Untrusted Data
**Summary:** Deserializing untrusted data can lead to arbitrary code execution or denial of service.
**Mitigation Rule:** Never deserialize untrusted or unvalidated data using insecure deserialization functions or libraries (e.g., `eval()`, `node-serialize`). Only deserialize data from trusted sources, or use secure, limited data formats (e.g., JSON validated with a strict schema) that do not allow for executable content, object graph manipulation, or excessive resource consumption.

### CWE-259: Use of Hard-Coded Password
**Summary:** Sensitive credentials or secrets are embedded directly within source code.
**Mitigation Rule:** Store all secrets (e.g., API keys, database credentials, encryption keys, private certificates) in environment variables, a secure secrets management service (e.g., AWS Secrets Manager, Azure Key Vault, HashiCorp Vault), or a dedicated configuration management system. Access these secrets at runtime via `process.env`. Never commit secrets, configuration files containing secrets, or credentials directly to source control.

### CWE-400: Uncontrolled Resource Consumption
**Summary:** An attacker can exhaust system resources, leading to a denial of service.
**Mitigation Rule:** Implement strict input validation on all incoming data, apply rate limiting to API endpoints (e.g., using `express-rate-limit`), and impose explicit limits on resource-intensive operations such as file uploads (size and number), query complexities, and the amount of data processed per request. Ensure proper connection pooling, timeouts, and circuit breakers for external service and database interactions.
