## Foundational Instructions for Secure C Code Generation

As a security-aware developer, generate secure C code using `any` that inherently prevents top security weaknesses. Focus on making the implementation inherently safe rather than merely renaming methods with "secure_" prefixes. Use inline comments to clearly highlight critical security controls, implemented measures, and any security assumptions made in the code. Adhere strictly to best practices from OWASP, with particular consideration for the OWASP ASVS guidelines. Avoid Slopsquatting: Be careful when referencing or importing packages. Do not guess if a package exists. Comment on any low reputation or uncommon packages you have included.

---

## Top CWEs for C + any: Mitigation Rules

### CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer
**Summary:** Operations on a buffer write or read beyond its allocated size, leading to memory corruption.
**Mitigation Rule:** Always perform explicit bounds checking before any memory access or operation. For string manipulations, prefer functions like `strncpy_s`, `strncat_s`, or `snprintf` over unbounded `strcpy`, `strcat`, `sprintf`, ensuring the destination buffer size is always provided and respected. For memory blocks, use `memcpy_s` or `memmove_s` with explicit size arguments.

### CWE-125: Out-of-bounds Read
**Summary:** An array or buffer is read at an index outside its valid bounds.
**Mitigation Rule:** Before accessing any array element or dereferencing a pointer with an offset, rigorously validate that the index or calculated address falls strictly within the allocated memory region.

### CWE-190: Integer Overflow or Wraparound
**Summary:** An arithmetic operation produces a result that is too large or too small to be stored in the destination integer type.
**Mitigation Rule:** Before performing arithmetic operations (especially additions, multiplications, or subtractions involving user-controlled input), check for potential integer overflows or underflows, using standard techniques like comparing against `*_MAX` or `*_MIN` limits, or utilizing safe integer arithmetic functions if a trusted library (e.g., specific `safec_lib` components if available and thoroughly vetted) is explicitly permitted.

### CWE-416: Use After Free
**Summary:** Memory is accessed after it has been freed, potentially leading to crashes, corruption, or arbitrary code execution.
**Mitigation Rule:** Immediately nullify pointers after calling `free()` on the memory they point to, and strictly ensure that no subsequent code path attempts to dereference or free the same pointer again. Design code to avoid scenarios where multiple pointers can refer to the same dynamically allocated memory.

### CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')
**Summary:** The application allows untrusted input to be included in an operating system command.
**Mitigation Rule:** Never construct OS commands by concatenating untrusted user input directly. Instead, use specific API calls provided by standard libraries (e.g., `execve` with carefully constructed arguments) rather than `system()` or `popen()`, and escape or quote all arguments if direct command execution is unavoidable and thoroughly vetted.

### CWE-798: Use of Hard-coded Credentials
**Summary:** Secret values, such as passwords, API keys, or cryptographic keys, are embedded directly into the source code.
**Mitigation Rule:** Do not embed any secrets or sensitive configuration values directly in the source code. All credentials, API keys, and cryptographic secrets must be retrieved from secure external sources at runtime, such as environment variables, secure configuration files, or dedicated secrets management services.

### CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')
**Summary:** A loop's exit condition can never be met, causing it to run indefinitely.
**Mitigation Rule:** Every loop must have a clearly defined and reachable exit condition that guarantees termination, especially when processing external input or bounded resources. Include defensive programming to handle unexpected conditions that might prevent loop termination.
