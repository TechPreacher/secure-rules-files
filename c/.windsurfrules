---
trigger: glob
description: Generates secure C code following OWASP ASVS guidelines and mitigating common C-specific CWEs.
globs: **/*.c, **/*.h
---

## Foundational Instructions for Secure C Application Development

As a security-aware developer, generate secure C code using `any` that inherently prevents top security weaknesses.
Focus on making the implementation inherently safe rather than merely renaming methods with "secure_" prefixes.
Use inline comments to clearly highlight critical security controls, implemented measures, and any security assumptions made in the code.
Adhere strictly to best practices from OWASP, with particular consideration for the OWASP ASVS guidelines.
**Avoid Slopsquatting**: Be careful when referencing or importing packages. Do not guess if a package exists. Comment on any low reputation or uncommon packages you have included.

## Identified Top CWEs for C Applications

### CWE-787: Out-of-bounds Write
**Summary:** An operation attempts to write data outside the intended bounds of a memory buffer.
**Mitigation Rule:** Always perform explicit bounds checking before writing to any buffer, ensuring that the source data size does not exceed the allocated buffer capacity. Prefer using size-limited string and memory manipulation functions like `strncpy`, `strncat`, `snprintf`, and `memcpy` with explicit size arguments, and ensure null termination for strings where required. Dynamically allocate memory using `calloc` or `malloc` with appropriate size calculations and always validate allocation success.

### CWE-416: Use After Free
**Summary:** An application continues to use a pointer after the memory it points to has been freed, leading to unpredictable behavior or arbitrary code execution.
**Mitigation Rule:** After freeing dynamically allocated memory using `free()`, immediately set the corresponding pointer to `NULL` to prevent dangling pointers. Implement a clear ownership model for dynamically allocated memory to ensure that memory is freed exactly once and only when no longer needed. Avoid double-free conditions by tracking memory state.

### CWE-798: Use of Hard-coded Credentials
**Summary:** The software contains hard-coded credentials, such as a password or cryptographic key, which can be easily discovered and compromised.
**Mitigation Rule:** Never embed credentials, secrets, or sensitive configuration data directly within the source code. Instead, retrieve secrets from secure external sources such as environment variables, a secure configuration management system, or a secrets vault at runtime.

### CWE-20: Improper Input Validation
**Summary:** The software does not validate or incorrectly validates input, which can lead to various vulnerabilities including buffer overflows, format string bugs, and command injection.
**Mitigation Rule:** Implement strict input validation on all external and untrusted data by applying a "whitelist" approach, allowing only known good patterns, types, and lengths. For numerical inputs, validate ranges. For string inputs, validate character sets and maximum lengths. When constructing commands or dynamic strings, use robust functions like `snprintf` with appropriate size limits and sanitize or escape any untrusted data to prevent command injection or format string vulnerabilities.

### CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')
**Summary:** Multiple threads or processes access a shared resource without proper synchronization, leading to unpredictable behavior due to interleaved operations.
**Mitigation Rule:** Protect all shared resources and critical sections with appropriate synchronization primitives such as mutexes, semaphores, or atomic operations. Ensure that locking mechanisms are correctly applied to prevent Time-of-Check Time-of-Use (TOCTOU) vulnerabilities and other race conditions.

### CWE-209: Information Exposure Through an Error Message
**Summary:** Error messages reveal sensitive information about the system's internal state, design, or configuration, which could aid an attacker.
**Mitigation Rule:** Implement generic, non-descriptive error messages for end-users, avoiding any details that could disclose internal system architecture, stack traces, database schema, or sensitive data. Log detailed error information to a secure, internal logging system for debugging purposes, but never expose it directly to external interfaces or users.

### CWE-732: Incorrect Permission Assignment for Critical Resource
**Summary:** The software assigns incorrect or overly permissive access rights to a critical resource, allowing unauthorized access or modification.
**Mitigation Rule:** When creating or accessing files, directories, or other critical system resources, explicitly set and verify the least permissive access rights required for the application's legitimate functionality. Follow the principle of least privilege for all user and process permissions.