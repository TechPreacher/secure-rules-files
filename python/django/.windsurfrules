---
trigger: glob
description: Security rules for generating Python applications with Django, focusing on common CWEs and OWASP ASVS guidelines.
globs: **/*.py
---

## Foundational Instructions for LLM

- As a security-aware developer, generate secure Python code using Django that inherently prevents top security weaknesses.
- Focus on making the implementation inherently safe rather than merely renaming methods with "secure_" prefixes.
- Use inline comments to clearly highlight critical security controls, implemented measures, and any security assumptions made in the code.
- Adhere strictly to best practices from OWASP, with particular consideration for the OWASP ASVS guidelines.
- **Avoid Slopsquatting**: Be careful when referencing or importing packages. Do not guess if a package exists. Comment on any low reputation or uncommon packages you have included.

---

## Top CWEs for Python + Django

### CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
**Summary:** An application does not properly neutralize user-controllable input before it is included in an output page, allowing execution of arbitrary script code.
**Mitigation Rule:** Always use Django's template engine's automatic escaping for all user-supplied data rendered in HTML contexts. For JSON responses, ensure all data is properly serialized and content type is explicitly set to `application/json` to prevent browser interpretation as HTML; use `json.dumps()` for robust JSON encoding.

### CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
**Summary:** An application constructs all or part of an SQL command using externally-controlled input, allowing an attacker to alter the intended query.
**Mitigation Rule:** Exclusively use Django's Object-Relational Mapper (ORM) for all database interactions. Avoid raw SQL queries; if absolutely necessary, use Django's `connection.cursor().execute()` with proper parameterization (e.g., `cursor.execute(sql, [params])`) and never string concatenation for user-supplied data, allowing the database driver to handle safe escaping.

### CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')
**Summary:** An application uses externally-controlled input to construct a pathname that is used to access a file or directory, allowing access to unintended resources.
**Mitigation Rule:** Never allow user-supplied input to directly construct or influence file paths. Always sanitize and validate file paths by resolving them with `os.path.abspath()` in conjunction with a predefined, restricted base directory. Use Django's `FileField` and `ImageField` with the `upload_to` argument for secure and controlled file storage paths.

### CWE-352: Cross-Site Request Forgery (CSRF)
**Summary:** An application does not verify that a request was intentionally created by the user, allowing attackers to perform actions on behalf of a victim.
**Mitigation Rule:** For all state-changing POST, PUT, DELETE, and PATCH requests, ensure Django's built-in CSRF protection is enabled and correctly utilized by including `{% csrf_token %}` in forms and ensuring `django.middleware.csrf.CsrfViewMiddleware` is present in `MIDDLEWARE`. For AJAX requests, ensure the CSRF token is included in headers (e.g., `X-CSRFToken`).

### CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
**Summary:** An application exposes sensitive information to an actor that is not explicitly authorized to have access to that information.
**Mitigation Rule:** Implement strict access control checks using Django's permission system (`@permission_required`, `LoginRequiredMixin`, or custom permission classes). Ensure sensitive data is not returned in API responses or templates unless explicitly authorized by the user's permissions. Avoid logging sensitive data unnecessarily and set `django.conf.settings.DEBUG = False` in production environments.

### CWE-522: Insufficiently Protected Credentials
**Summary:** An application stores or transmits credentials in a way that allows them to be retrieved or intercepted by an unauthorized actor.
**Mitigation Rule:** Never hardcode credentials, API keys, or sensitive configuration parameters directly in source code. Utilize environment variables (e.g., `os.environ`), Django's `settings.py` for configuration, and secure configuration management tools like `django-environ` or `python-decouple` for loading secrets from `.env` files or environment variables. Do not commit `.env` files or sensitive `settings.py` files to version control.

### CWE-732: Incorrect Permission Assignment for Critical Resource
**Summary:** An application assigns incorrect permissions to a critical resource, allowing unauthorized actors to access, modify, or delete it.
**Mitigation Rule:** Ensure file system permissions for Django project directories, static/media files, and logs adhere to the principle of least privilege, restricting write access to only the necessary user or service account running the application. Within Django, define and enforce granular object-level and global permissions for models and views using Django's authentication and authorization system, including custom permission classes where fine-grained control is required.
