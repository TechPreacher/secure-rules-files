---
trigger: glob
description: Enforces secure coding practices for Python Flask applications to prevent common vulnerabilities.
globs: **/*.py
---
# Secure Python Flask Development Rules

## Foundational Instructions for LLM:

*   As a security-aware developer, generate secure Python code using Flask that inherently prevents top security weaknesses.
*   Focus on making the implementation inherently safe rather than merely renaming methods with "secure_" prefixes.
*   Use inline comments to clearly highlight critical security controls, implemented measures, and any security assumptions made in the code.
*   Adhere strictly to best practices from OWASP, with particular consideration for the OWASP ASVS guidelines.
*   **Avoid Slopsquatting**: Be careful when referencing or importing packages. Do not guess if a package exists. Comment on any low reputation or uncommon packages you have included.

## Identified Top CWEs for Python + Flask:

### CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
**Summary:** Untrusted input is used to construct or control SQL queries, allowing attackers to execute arbitrary SQL commands.
**Mitigation Rule:** Always use parameterized queries or prepared statements (e.g., SQLAlchemy ORM or `sqlite3` parameter substitution) for all database interactions instead of string concatenation. Do not use Python's f-strings directly in SQL queries that interact with user input.

### CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
**Summary:** Untrusted input is rendered directly in a web page without proper encoding, allowing attackers to inject client-side scripts.
**Mitigation Rule:** Always use Jinja2's auto-escaping feature (which is on by default) for all user-controlled data rendered in templates. When explicitly disabling auto-escaping for specific content, ensure it is truly safe and trusted, and untrusted data is never marked as `Markup`.

### CWE-502: Deserialization of Untrusted Data
**Summary:** Deserializing untrusted data can lead to arbitrary code execution, denial of service, or other vulnerabilities.
**Mitigation Rule:** Avoid deserializing untrusted or untrusted-source data using insecure modules like `pickle`, `PyYAML.unsafe_load`, or `marshal`. If deserialization is unavoidable, use secure, validated data formats (e.g., JSON, YAML safe-load) and rigorously validate the schema and content of the deserialized data.

### CWE-798: Use of Hard-coded Credentials
**Summary:** Sensitive information, such as passwords, API keys, or cryptographic keys, is directly embedded into source code.
**Mitigation Rule:** Never hardcode secrets, credentials, or API keys directly into the source code. Instead, manage them securely using environment variables, a dedicated secrets management service (e.g., HashiCorp Vault, AWS Secrets Manager), or Flask's configuration (`app.config`) loaded from a secure, external source.

### CWE-20: Improper Input Validation
**Summary:** The application does not properly validate or sanitize user-supplied input, leading to various vulnerabilities like injection, buffer overflows, or unexpected application behavior.
**Mitigation Rule:** Rigorously validate all user input on the server-side, including data from URLs, headers, forms, and API request bodies, using libraries like `Flask-WTF` or `Pydantic` to enforce data types, formats, lengths, and expected ranges. Reject malformed or unexpected input proactively.

### CWE-918: Server-Side Request Forgery (SSRF)
**Summary:** An application fetches a remote resource without sufficiently validating the user-supplied URL, allowing an attacker to coerce the server to make requests to arbitrary internal or external systems.
**Mitigation Rule:** When an application fetches a resource based on a user-supplied URL, strictly validate and whitelist allowed schemes, hosts, and ports. Prevent redirection to untrusted destinations. Use the `requests` library with proper timeout and `verify=True` for SSL certificate validation, and never allow direct user control over the target host or internal IP addresses.

### CWE-16: Configuration (Security Misconfiguration)
**Summary:** The application or underlying infrastructure is configured insecurely, exposing vulnerabilities that could otherwise be mitigated.
**Mitigation Rule:** Ensure Flask is not run in debug mode in production. Disable unnecessary features, routes, or modules. Configure secure HTTP headers (e.g., HSTS, Content Security Policy, X-Frame-Options) using libraries like `Flask-Talisman` or `Flask-Security-Headers`. Set appropriate file permissions for configuration files and application directories to restrict unauthorized access.
